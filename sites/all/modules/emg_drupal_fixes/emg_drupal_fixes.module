<?php

function emg_drupal_fixes_init() {
//	If the jQuery version is higher than 1.9, this migration plugin should prevent errors from older code.
	drupal_add_js('//code.jquery.com/jquery-migrate-1.2.1.min.js', array('type'=>'external', 'weight'=>-100));
	
//	This forces jquery ui to be enabled with anonymous logins
	drupal_add_library('system', 'ui');
  
//	Add HTML5 Tag Support to old IEs
	$html5shiv = array(
		'#tag' => 'script',
		'#attributes' => array( // Set up an array of attributes inside the tag
			'src' => drupal_get_path('module', 'emg_drupal_fixes') . '/js/html5shiv.js', 
		),
		'#prefix' => '<!--[if lte IE 8]>',
		'#suffix' => '</script><![endif]-->'
	);
	drupal_add_html_head($html5shiv, 'html5shiv');
}

// Redirect other domians to a primary domain
function emg_drupal_fixes_boot(){
	$domain = trim(variable_get('emg_drupal_fixes_main_domain_redirect', ''));
	if(empty($domain))
		return;
				
	$protocol = (strstr('http://', $domain) ? 'http://' : '//');
	$protocol = (strstr('https://', $domain) ? 'https://' : $protocol);
	
	$domain = str_replace($protocol, '', $domain);
		
//	If configured, force an HTTPS protocol, but not for drush calls
	if(variable_get('emg_drupal_fixes_whole_site_ssl', 0) && @$_SERVER['HTTPS'] != 'on' && $_SERVER['REMOTE_ADDR'] != '127.0.0.1'){
		$_SERVER['SERVER_NAME'] = '';
		$protocol = 'https://';
	}
	
//	Do not redirect non-browsers
	if(isset($_SERVER['SERVER_NAME']) && $_SERVER['SERVER_NAME'] != $domain){
		$exceptions = trim(variable_get('emg_drupal_fixes_main_domain_redirect_exceptions', ''));
		if(!empty($exceptions)){
			$exceptions = explode(' ', $exceptions);
			if(in_array($_SERVER['SERVER_NAME'], $exceptions))
				return;
		}
		if(variable_get('emg_drupal_fixes_main_domain_redirect_type', 301) == 301)
			header("HTTP/1.1 301 Moved Permanently");
		header('location: ' . $protocol . $domain . $_SERVER['REQUEST_URI']);
		die;	
	}
}

function emg_drupal_fixes_help($path, $arg) {
	switch ($path) {
		case "admin/help#emg_drupal_fixes":
			return '<p>' . t("Built by Epiphany to fix misc. bugs and annoyances from Core and other modules.") . '</p>';
			break;
	}
} 

function emg_drupal_fixes_menu(){
	$items = array();
	$items['admin/config/system/emgdrupalfixes'] = array(
	  'title' => 'Epiphany Drupal Adjustments',
	  'description' => 'Some Misc. Configuration adjustments that are not present in other modules.',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('emg_drupal_fixes_settings'),
	  'access arguments' => array('administer emg drupal fixes'),
	  'type' => MENU_NORMAL_ITEM,
	);
	return $items;
}

function emg_drupal_fixes_settings($form){
//	Be able to redirect all domains and subdomains to one domain
	$form['emg_drupal_fixes_main_domain_redirect'] = array(
	  '#type' => 'textfield',
	  '#title' => t('Primary domain redirect?'),
	  '#default_value' => variable_get('emg_drupal_fixes_main_domain_redirect', ''),
	  '#description' => t('By entering a primary domain (ex. www.example.com), all other domains will change to this domain. (ex example.com/content will change to www.example.com/content')
	);
//	Is this a permanent or temporary redirect
	$form['emg_drupal_fixes_main_domain_redirect_type'] = array(
	  '#type' => 'radios',
	  '#title' => t('Is this a permanent redirect?'),
	  '#default_value' => variable_get('emg_drupal_fixes_main_domain_redirect_type', 301),
	  '#options' => array(301=>'Yes', 302=>'No'),
	  '#description' => t('A permanent redirect will tell search engines to ignore the domain that brought them here and use the redirecting domain in the future.')
	);		
//	Exceptions to the rule, domains that will not be redirected.
	$form['emg_drupal_fixes_main_domain_redirect_exceptions'] = array(
	  '#type' => 'textfield',
	  '#title' => t('Primary domain redirect exceptions'),
	  '#default_value' => variable_get('emg_drupal_fixes_main_domain_redirect_exceptions', ''),
	  '#description' => t('A list of domains that will not be automatically redirected to the primary domain. (separate domains with a space)')
	);
	
//	Force the entire site to be SSL
	$form['emg_drupal_fixes_whole_site_ssl'] = array(
	  '#type' => 'radios',
	  '#title' => t('Should all pages on the site use the SSL?'),
	  '#default_value' => variable_get('emg_drupal_fixes_whole_site_ssl', 0),
			'#options' => array(0=>'No', 1=>'Yes'),
	  '#description' => t('You must have SSL working for this site!  Enabling this on your site too early will cause an error.')
	);
	
//	Be able to change the view mode of nodes promoted to the homepage.
	$entity_info = entity_get_info('node');
	$options = array();
	foreach($entity_info['view modes'] as $key=>$arr)
		$options[$key] = t($arr['label']);
		
	$form['emg_drupal_fixes_frontpage_view_mode'] = array(
	  '#type' => 'radios',
	  '#title' => t('What View Mode Should be used on the Front Page?'),
	  '#default_value' => variable_get('emg_drupal_fixes_frontpage_view_mode', 'teaser'),
			'#options' => $options,
	  '#description' => t('By Default, Drupal shows all content types promoted to the front page with the "Teaser" view mode.  This allows you to change this.')
	);
	
	
	return system_settings_form($form);
}

function emg_drupal_fixes_entity_view_mode_alter(&$view_mode, $context) {
//	If this is the front page and the front page view mode has been changed,
//	then change if necessary
	if ($context['entity_type'] == 'node' 
  		&& $view_mode != variable_get('emg_drupal_fixes_frontpage_view_mode', 'teaser')
		&& drupal_is_front_page()) 
   		$view_mode = variable_get('emg_drupal_fixes_frontpage_view_mode', 'teaser');
}


/**
 * 
 *	@implements  hook_node_postsave()
 *
 * Gets called after a node has been inserted/updated/deleted to database.
 ***NOTE:  dsm (Devel)  doesn't seem to work in this function, but watchdog does.
 *
 * 	This is a workaround fix for the redirect module's issue where it ignores the pathauto module's URL Aliases.
 *		Se here for details: https://docs.google.com/spreadsheet/lv?key=1WS0dHNqCKhzsSFcrStdPlUw-ajCJ-ci-WSjWfXnR3Is&gid=0&page=8
 */
function emg_drupal_fixes_entity_postsave($entity, $entity_type, $op) {
//	Make sure both modules are installed.
	if(!module_exists('pathauto') || !module_exists('redirect'))
		return;
			
	list($id) = entity_extract_ids($entity_type, $entity); 
	$path = $entity_type . '/' . $id;
	
//	See if this entity has aliases in both redirect's and pathauto's tables
	$conflicts = db_query("
		SELECT a.alias, a.source, r.rid, r.source as rsource, r.redirect
		FROM  {url_alias} a
		LEFT JOIN {redirect} r ON r.source= a.alias
		WHERE r.rid IS NOT NULL
	");
	if($conflicts){
		while($conflict = $conflicts->fetchObject()){
		//	delete any conflicts from the redirect module's table, since pathauto should have priority.
			$delete = db_query("DELETE FROM {redirect} WHERE rid = $conflict->rid");
			$status = ($delete ? 'Successfully' : '<i>Unsuccessfully');		
	 		watchdog('emg_drupal_fixes_delete_conflicting_redirects', "{$status} deleted a redundant redirect for {$conflict->source} ($conflict->rsource) " . __FUNCTION__);		
		}
	}
}
